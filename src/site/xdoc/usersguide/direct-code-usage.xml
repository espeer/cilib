<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2003 - 2009
    Computational Intelligence Research Group (CIRG@UP)
    Department of Computer Science
    University of Pretoria
    South Africa

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->
<document> 
  <properties> 
    <title>CIlib - User's Guide - Direct usage in source</title> 
    <author>Gary Pampara</author>
  </properties> 
  <body>
    <section name="Including and running CIlib within your own source">
        <p>
            CIlib can asily be intergrated into your project source without needing to
            specify an XML configuration file. The code must be called directly and
            built correctly in order to be used without an XML configutration. CIlib does, however,
            create sensible defaults so the algorithm should still be able to execute. It is up to the user
            to correctly build the type of algorithm required.
        </p>
        <p>
            The following is a simple example on how to intergrate a gbest PSO within your
            project.
        </p>
        <ol>
            <li>Implement one of the Problem interfaces in your code (only if needed - a number of predefined problems also exist).</li>
            <li>Instanciate an Algorithm.</li>
            <li>Set the problem.</li>
            <li>Add stopping conditions</li>
            <li>Setup any other properties of the algorithm.</li>
            <li>Add any necessary event listeners to the algorithm.</li>
            <li>Call the initialise() method on the algorithm.</li>
            <li>Start the algorithm.</li>
        </ol>
        <p>
            Algorithm implements the Runnable interface so you can have it execute in a separate 
            thread. Alternatively, call the run() method directly if you do not want the algorithm to run 
            concurrently with your code.
        </p>
        <p>
            <strong>Note:</strong>
            <br/>
<!--        <note>-->
            All classes within CIlib are created to conform to the JavaBeans spec. This implies that all classes
            must provide a default constructor and have member variables with names that correspond to the 
            available getX() and setX(X x) accessor methods. Sensible defaults have been provided for most properties.
<!--        </note>-->
        </p>
    </section>
    
    <section name="Implementation Example">
        <p>
            The following is an example to use CIlib within your own code:
        </p>
        <ol>
            <li>
                <p>
                    Implement the <code>OptimisationProblem</code> interface, or use an already existing class:
                </p>
                <source><![CDATA[
class MyProblem implements OptimisationProblem {
    public double getFitness(Vector solution) {
        // return the fitness of the given potential solution.
        // higher fitness values indicate a better solution to the problem.
    }
         
    .
    .
    .
    .
}
]]></source>
            </li>
            <li>
                <p>
                    Construct a PSO to be used within the optimisation
                </p>
                <source>PSO pso = new PSO();</source>
            </li>
            <li>
                <p>
                    Set the problem:
                </p>
                <source>
    MyProblem problem = new MyProblem();
    pso.setOptimisationProblem(problem);
</source>
            </li>
            <li>
                <p>
                    Add stopping conditions. This stops the algorithm execution after 10000 iterations:
                </p>
                <source><![CDATA[
    MaximumIterations maxIter = new MaximumIterations(10000);
    pso.addStoppingCondition(maxIter);
]]></source>
            </li>
            <li>
                <p>
                    Set any other properties (for this example, we would like to make use of the 
                    Von Neumann Topology with 40 particles). The number of particles for the algorithm
                    are specified using a PopulationInitialisationStrategy, all PopulationBasedAlgorithms
                    specify the size of their populations using the provided PopulationInitialisationStrategy,
                    the default is a cloning strategy:
                </p>
                <source><![CDATA[
    pso.setTopology(new VonNeumannTopology<Particle>());

    PopulationInitialisationStrategy intialisation = new ClonedPopulationInitialisationStrategy();
    initialisation.setEntityNumber(40);
    initialisation.setEntityType(new StandardParticle());
    pso.setInitialisationStrategy(initialisation);
]]></source>
                <p>
                <note>
                    Alternatively, you can make use of the XMLObjectFactory to setup properties
                    in the same way that the simulator does.
                </note>
                </p>
            </li>
            <li>
                <p>
                    Add event listeners:
                </p>
                <source><![CDATA[
    pso.addIterationEventListener(this);
]]></source>
                <note>
                    It is assumed that the class implements the <code>IterationEventListener</code> interface.
                </note>
            </li>
            <li>
                <p>
                    Call initialise():
                </p>
                <source><![CDATA[
    pso.initialise();
]]></source>
            </li>
            <li>
                <p>
                    Start the algorithm:
                </p>
                <source><![CDATA[
    pso.run(); // Executes in current thread
]]></source>
                <p>
                    OR
                </p>
                <source><![CDATA[
    new Thread(pso).start(); // Executes in a new thread
]]></source>
                <p>
                    To get feedback from the algorithm, you can make use of the measurements in 
                    <code>net.sourceforge.cilib.measurement</code> or you can query the algorithm directly:
                </p>
                <source><![CDATA[
    pso.getBestSolution(); // will return the best solution found so far.
]]></source>
            </li>
        </ol>
    </section>

  </body>
</document>
