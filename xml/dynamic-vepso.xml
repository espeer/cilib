<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="pso" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="30"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityUpdateStrategy class="pso.velocityupdatestrategies.MOVelocityUpdateStrategy">
                        <localGuideSelectionStrategy class="pso.moo.guideselectionstrategies.PBestGuideSelectionStrategy"/>
                        <localGuideUpdateStrategy class="pso.moo.guideupdatestrategies.StandardGuideUpdateStrategy"/>
                        <globalGuideSelectionStrategy class="pso.moo.guideselectionstrategies.VEPSOGuideSelectionStrategy">
                            <knowledgeTransferStrategy class="algorithm.population.knowledgetransferstrategies.SelectiveKnowledgeTransferStrategy">
                                <populationSelection class="util.selection.recipes.RingBasedPopulationSelection"/>
                                <entitySelection class="util.selection.recipes.TournamentSelection"/>
                            </knowledgeTransferStrategy>
                        </globalGuideSelectionStrategy>
                        <globalGuideUpdateStrategy class="pso.moo.guideupdatestrategies.StandardGuideUpdateStrategy"/>
                    </velocityUpdateStrategy>
                    <personalBestUpdateStrategy class="pso.positionupdatestrategies.BoundedPersonalBestUpdateStrategy"/>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="moo.iterationstrategies.ArchivingIterationStrategy">
                <archive class="moo.archive.constrained.SetBasedConstrainedArchive" capacity="1000">
                    <pruningSelection class="util.selection.recipes.RandomSelection"/>
                </archive>
                <iterationStrategy class="pso.dynamic.DynamicIterationStrategy">
                    <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                        <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundaryConstraint"/>
                    </iterationStrategy>
                    <detectionStrategy class="pso.dynamic.detectionstrategies.RandomSentriesDetectionStrategy">
                        <iterationsModulus value="1"/>
                        <numberOfSentries class="controlparameter.ConstantControlParameter" parameter="2"/>
                    </detectionStrategy>
                    <responseStrategy class="pso.dynamic.responsestrategies.ArchiveReevaluationResponseStrategy">
                    </responseStrategy>
                </iterationStrategy>
            </iterationStrategy>
        </algorithm>

        <algorithm id="vepso" class="algorithm.population.MultiPopulationCriterionBasedAlgorithm">
            <addStoppingCondition class="stoppingcondition.MaximumIterations" maximumIterations="1000"/>
            <objectiveAssignmentStrategy class="moo.criterion.objectiveassignmentstrategies.SequentialObjectiveAssignmentStrategy"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <addPopulationBasedAlgorithm idref="pso"/>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="FDA1_f1" class="problem.FunctionMinimisationProblem">
            <function class="functions.continuous.dynamic.moo.fda1.FDA1_f1" domain="R(0, 1)"/>
        </problem>
        <problem id="FDA1_g" class="problem.FunctionMinimisationProblem">
            <function class="functions.continuous.dynamic.moo.fda1.FDA1_g">
                <n_t value="10"/>
                <tau_t value="5"/>
            </function>
        </problem>
        <problem id="fda_h" class="problem.FunctionMinimisationProblem">
            <function id="fda1_h" class="functions.continuous.dynamic.moo.fda1.FDA1_h">
                <setFDA1_g>
                    <problem idref="FDA1_g"/>
                </setFDA1_g>
                <setFDA1_f>
                    <problem idref="FDA1_f1"/>
                </setFDA1_f>
            </function>
        </problem>
        <problem id="FDA1_g*h" class="problem.FunctionMinimisationProblem">
            <function class="functions.continuous.dynamic.moo.fda1.FDA1_f2">
                <setFDA1_g>
                    <problem idref="FDA1_g"/>
                </setFDA1_g>
                <setFDA1_h>
                    <problem idref="fda_h"/>
                </setFDA1_h>
            </function>
        </problem>
        <problem id="moo_problem" class="problem.MOOptimisationProblem">
            <add idref="FDA1_f1"/>
            <add idref="FDA1_g*h"/>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="10" samples="1">
        <addMeasurement class="measurement.multiple.ParetoOptimalFront"/>
    </measurements>

    <simulations>
        <simulation>
            <algorithm idref="vepso"/>
            <problem idref="moo_problem"/>
            <measurements idref="fitness" file="data/dynamic-vepso.txt"/>
        </simulation>
    </simulations>
</simulator>
